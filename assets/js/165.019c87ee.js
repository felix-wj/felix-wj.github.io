(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{633:function(t,a,s){"use strict";s.r(a);var r=s(10),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"适配器、桥接、装饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适配器、桥接、装饰器模式"}},[t._v("#")]),t._v(" 适配器、桥接、装饰器模式")]),t._v(" "),a("p",[t._v("三种模式挺像，因为类与类的结合方式无外乎继承，组合")]),t._v(" "),a("h2",{attrs:{id:"适配器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式"}},[t._v("#")]),t._v(" 适配器模式")]),t._v(" "),a("p",[t._v("侧重已有的两种类的功能，比如一个110V充电，1个220V充电，现有一个仅支持110V充电的设备，已经只能提供220V电压的插座，我们需要一个适配器，能将输入的220V电压转成110V再通过110V充电器给设备使用，这样就能够复用两个已有功能，而不是重新造一个（实现所有细节）充电器。")]),t._v(" "),a("h2",{attrs:{id:"桥接模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[t._v("#")]),t._v(" 桥接模式")]),t._v(" "),a("p",[t._v("侧重是不同分类的功能，例如外形有圆、方，颜色有红、黄，运动形态有走、跑、飞。如果将这些写在一起，每加入一种变化，类都需要进行改动。\n所以可以抽象出一个汇总的类，将各种不同分类的功能桥接在一起，外界只需要使用这个类，就拥有了之前各种不同的功能。")]),t._v(" "),a("h2",{attrs:{id:"装饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[t._v("#")]),t._v(" 装饰器模式")]),t._v(" "),a("p",[t._v("侧重功能的扩展。通过实现原本的接口，将原类型作为成员变量，原接口由成员变量实现，然后增加新的函数，添加功能。")])])}),[],!1,null,null,null);a.default=e.exports}}]);