(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{616:function(t,a,s){"use strict";s.r(a);var r=s(10),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"其他排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他排序"}},[t._v("#")]),t._v(" 其他排序")]),t._v(" "),a("h3",{attrs:{id:"计数排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计数排序"}},[t._v("#")]),t._v(" 计数排序")]),t._v(" "),a("p",[t._v("适用于数据范围小且已知的情况")]),t._v(" "),a("p",[t._v("时间复杂度 O(N)")]),t._v(" "),a("p",[t._v("构造一个数组，将数据作为数组下标，在数组上计数。最后遍历数组生成排序后的数列。")]),t._v(" "),a("h3",{attrs:{id:"桶排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桶排序"}},[t._v("#")]),t._v(" 桶排序")]),t._v(" "),a("p",[t._v("序列的值需要尽量均匀\nn个数\n数组中的数 *n/(数组中最大的数+1)   放到n个桶里")]),t._v(" "),a("p",[t._v("复杂度 O(N+C)  C=N*(logN-logM)  N是元素个数，M是有数据的桶的个数")]),t._v(" "),a("h3",{attrs:{id:"基数排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基数排序"}},[t._v("#")]),t._v(" 基数排序")]),t._v(" "),a("p",[t._v("以十进制数为例，先排个位，然后一次取出，再排十位，再排百位。。。 需要十个桶\n如果是字符串，需要26个桶\n时间复杂度 O(K*N)")]),t._v(" "),a("p",[t._v("这三个都是借助空间换时间")])])}),[],!1,null,null,null);a.default=v.exports}}]);