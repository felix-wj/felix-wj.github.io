(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{517:function(a,e,r){"use strict";r.r(e);var t=r(10),s=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"serial"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serial"}},[a._v("#")]),a._v(" Serial")]),a._v(" "),e("p",[a._v("Serial 垃圾收集器可以说是最古老的垃圾收集器，顾名思义他是串行进行垃圾收集的，在整个垃圾收集的时候回进行 STW 暂停掉整个用户线程的执行。")]),a._v(" "),e("p",[a._v("其在年轻代垃圾收集采用的是标记复制算法，")]),a._v(" "),e("p",[a._v("老年代的垃圾收集版本为 Serial Old 采用的是标记整理算法。")]),a._v(" "),e("p",[a._v("Serial 垃圾收集器在 gc 的整个过程单线程串行收集会进行长时间的 STW，所以对于用户体验很不好，但因为是单线程 STW 其收集过程不受任何影响收集过程简单高效，故有很高的单线程收集效率。")]),a._v(" "),e("p",[a._v("Serial Old 是 Serial 垃圾收集器的老年代版本，其主要作用是在 jdk 1.5 之前配合 parallel 一起使用，以及作为 CMS 垃圾收集器的后备方案。\n开启参数："),e("code",[a._v("-XX:+UseSerialGC -XX:+UseSerialOldGC")])]),a._v(" "),e("h2",{attrs:{id:"parallel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parallel"}},[a._v("#")]),a._v(" Parallel")]),a._v(" "),e("p",[a._v("Parallel 收集器与 Serial 收集器唯一的区别是其垃圾回收的过程是多线程的，默认线程个数为当前 cpu 核数，这个个数可以自己设置"),e("code",[a._v("-XX:ParallelGCThreads")]),a._v(" 但一般不推荐修改。")]),a._v(" "),e("p",[a._v("可以理解为 Parallel 为 Serial 的多线程版")]),a._v(" "),e("p",[a._v("同时 Parallel 也提供了老年代版本的收集器来对老年代进行垃圾回收，同样其年轻代算法采用的是标记复制算法，老年代是标记整理算法。")]),a._v(" "),e("p",[e("code",[a._v("-XX:+UseParallelGC(年轻代),-XX:+UseParallelOldGC(老年代)")])]),a._v(" "),e("h2",{attrs:{id:"parnew"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parnew"}},[a._v("#")]),a._v(" ParNew")]),a._v(" "),e("p",[a._v("ParNew 与 Parallel 并没有本质上的区别，其主要是为了配合 CSM 的垃圾收集而提供的年轻代的垃圾收集器，其只有年轻代的收集版本，垃圾收集上与 Parallel 相同。")]),a._v(" "),e("p",[a._v("目前仅有 Serial 和 ParNew 可与 CSM 进行配合垃圾收集。")]),a._v(" "),e("h2",{attrs:{id:"cms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cms"}},[a._v("#")]),a._v(" CMS")]),a._v(" "),e("p",[a._v("CMS是一种以获取最短回收停顿时间为目标的收集器，它非常适合应用在互联网站或者B/S系统的服务器上。")]),a._v(" "),e("p",[e("strong",[a._v("作用范围")]),a._v("：老年代")]),a._v(" "),e("p",[e("strong",[a._v("算法")]),a._v("：标记清除")]),a._v(" "),e("p",[e("strong",[a._v("启用参数")]),a._v("： "),e("code",[a._v("-XX:+UseConMarkSweepGC")])]),a._v(" "),e("p",[e("strong",[a._v("默认回收线程数")]),a._v("：（CPU数量 + 3）/4")]),a._v(" "),e("p",[a._v("Java9之后使用CMS垃圾收集器后，默认年轻代就为ParNew收集器，并且不可更改，同时JDK9之后被标记为不推荐使用，JDK14就被删除了。")]),a._v(" "),e("h3",{attrs:{id:"垃圾收集步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集步骤"}},[a._v("#")]),a._v(" 垃圾收集步骤")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("初始标记（CMS initial mark）：独占CPU，stop-the-world, 仅标记GCroots能直接关联的对象,速度比较快；")])]),a._v(" "),e("li",[e("p",[a._v("并发标记（CMS concurrent mark）:可以和用户线程并发执行，通过GCRoots Tracing 标记所有可达对象；")])]),a._v(" "),e("li",[e("p",[a._v("重新标记（CMS remark）：独占CPU，stop-the-world, 对并发标记阶段用户线程运行产生的垃圾对象进行标记修正,以及更新逃逸对象；")])]),a._v(" "),e("li",[e("p",[a._v("并发清理（CMS concurrent sweep）：可以和用户线程并发执行，清理在重复标记中被标记为可回收的对象。")])])]),a._v(" "),e("h3",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("支持并发收集.")])]),a._v(" "),e("li",[e("p",[a._v("低停顿,因为CMS可以控制将耗时的两个stop-the-world操作保持与用户线程恰当的时机并发执行，并且能保证在短时间执行完成，这样就达到了近似并发的目的.")])])]),a._v(" "),e("h3",{attrs:{id:"缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[a._v("#")]),a._v(" 缺点")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("CMS收集器对CPU资源非常敏感,在并发阶段虽然不会导致用户线程停顿，但是会因为占用了一部分CPU资源，如果在CPU资源不足的情况下应用会有明显的卡顿。")])]),a._v(" "),e("li",[e("p",[a._v("无法处理浮动垃圾：在执行‘并发清理’步骤时，用户线程也会同时产生一部分可回收对象，但是这部分可回收对象只能在下次执行清理是才会被回收。")])]),a._v(" "),e("li",[e("p",[a._v("如果在清理过程中预留给用户线程的内存不足就会出现"),e("code",[a._v("Concurrent Mode Failure")]),a._v(",一旦出现此错误时便会切换到"),e("code",[a._v("SerialOld")]),a._v("收集方式。")])]),a._v(" "),e("li",[e("p",[a._v("CMS清理后会产生大量的内存碎片，当有不足以提供整块连续的空间给新对象或晋升为老年代对象时又会触发"),e("code",[a._v("FullGC")]),a._v("。")])])]),a._v(" "),e("h3",{attrs:{id:"参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[a._v("#")]),a._v(" 参数")]),a._v(" "),e("div",{staticClass:"language-BASH line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+UseConcMarkSweepGC")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#启用cms")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:ConcGCThreads")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#并发的GC线程数")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+UseCMSCompactAtFullCollection")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#FullGC 之后做压缩整理（减少碎片）")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:CMSFullGCsBeforeCompaction")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#间隔多少次 FullGC 之后压缩整理一次，默认是0，代表间隔 0 次 FullGC 后会进行压缩整理，即每次 FullGC 后都会进行整理")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:CMSInitiatingOccupancyFraction")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#当老年代使用达到该比例时会触发 FullGC（默认是92，这是百分比）")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+UseCMSInitiatingOccupancyOnly")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#只使用设定的回收阈值(-XX:CMSInitiatingOccupancyFraction设定的值)，如果不指定，JVM仅在第一次使用设定值，后续则会自动调整")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+CMSScavengeBeforeRemark")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#在CMS GC 标记前启动一次 minor gc，目的在于减少老年代对年轻代的引用，降低CMS GC的标记阶段时的开销，一般CMS的GC耗时 80%都在标记阶段")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+CMSParallellnitialMarkEnabled")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#表示在初始标记的时候多线程执行，缩短STW")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+CMSParallelRemarkEnabled")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#在重新标记的时候多线程执行，缩短STW;")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("h2",{attrs:{id:"g1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#g1"}},[a._v("#")]),a._v(" G1")]),a._v(" "),e("p",[a._v("G1重新定义了堆空间，打破了原有的分代模型，将堆划分为一个个区域。这么做的目的是在进行收集时不必在全堆范围内进行，这是它最显著的特点。")]),a._v(" "),e("p",[a._v("区域划分的好处就是带来了停顿时间可预测的收集模型：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。")]),a._v(" "),e("p",[a._v("G1会通过一个合理的计算模型，计算出每个Region的收集成本并量化，这样一来，收集器在给定了“停顿”时间限制的情况下，总是能选择一组恰当的Regions作为收集目标，让其收集开销满足这个限制条件，以此达到实时收集的目的。")]),a._v(" "),e("h3",{attrs:{id:"垃圾收集步骤-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集步骤-2"}},[a._v("#")]),a._v(" 垃圾收集步骤")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("初始标记（Initial Marking）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。")])]),a._v(" "),e("li",[e("p",[a._v("并发标记（Concurrent Marking）：是从GC Roots开始堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。")])]),a._v(" "),e("li",[e("p",[a._v("最终标记（Final Marking）：是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并行执行。")])]),a._v(" "),e("li",[e("p",[a._v("筛选回收（Live Data Counting and Evacuation）：首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。这个阶段也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。")])])]),a._v(" "),e("h3",{attrs:{id:"与cms相比-g1的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与cms相比-g1的优点"}},[a._v("#")]),a._v(" 与CMS相比，G1的优点")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("G1不会产生内存碎片，CMS使用的是空闲列表，而G1使用的是Region列表")])]),a._v(" "),e("li",[e("p",[a._v("G1可以精确控制停顿时间，CMS只能粗略控制")])])]),a._v(" "),e("p",[a._v("控制G1回收垃圾的时间:"),e("code",[a._v("-XX:MaxGCPauseMillis=200")])])])}),[],!1,null,null,null);e.default=s.exports}}]);